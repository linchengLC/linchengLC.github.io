<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jane - A super concise theme for Hugo</title>
    <link>https://linchengLC.github.io/</link>
    <description>Recent content on Jane - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 18 Oct 2019 12:11:17 +0800</lastBuildDate>
    
        <atom:link href="https://linchengLC.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>反转整数</title>
      <link>https://linchengLC.github.io/post/%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0/</link>
      <pubDate>Fri, 18 Oct 2019 12:11:17 +0800</pubDate>
      
      <guid>https://linchengLC.github.io/post/%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0/</guid>
      
        <description>&lt;p&gt;给定一个 32 位有符号整数，将整数中的数字进行反转。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; 123&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt; 321&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; -123&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt; -321&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例 3:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; 120&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt; 21&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2^31 ,  2^31 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现思路:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1.如果x为负数则将标志位sign置为-1，并且将x变为正数&lt;/p&gt;

&lt;p&gt;2.for循环&lt;/p&gt;

&lt;p&gt;对x取10余得到temp&lt;/p&gt;

&lt;p&gt;放入res头内res*10+temp&lt;/p&gt;

&lt;p&gt;将x去除末尾&lt;/p&gt;

&lt;p&gt;3.还原x的符号到res&lt;/p&gt;

&lt;p&gt;4.处理res的溢出问题，使用math.maxint32和math.minint32&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;代码实现:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;/**
 * Reverse Integer
 * 反转整数
*/
import (
	“math”
)
func reverse(x int) int {
	sign := 1
	// 处理负数
	if x &amp;lt; 0 {
		sign = -1
		x = -1 * x
	}
	res := 0
	for x &amp;gt; 0 {
		// 取出x的末尾
		temp := x % 10
		// 放入 res 的开头
		res = res*10 + temp
		// x 去除末尾
		x = x / 10
	}
	// 还原 x 的符号到 res
	res = sign * res
	// 处理 res 的溢出问题
	if res &amp;gt; math.MaxInt32 || res &amp;lt; math.MinInt32 {
		res = 0
	}
	return res
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>罗马数字转换为整数</title>
      <link>https://linchengLC.github.io/post/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B4%E6%95%B0/</link>
      <pubDate>Fri, 18 Oct 2019 12:11:17 +0800</pubDate>
      
      <guid>https://linchengLC.github.io/post/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B4%E6%95%B0/</guid>
      
        <description>&lt;p&gt;罗马数字包含以下七种字符： I ， V ， X ， L ， C ， D 和 M 。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;字符&lt;/strong&gt;  &lt;strong&gt;数值&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I 1&lt;/p&gt;

&lt;p&gt;V 5&lt;/p&gt;

&lt;p&gt;X 10&lt;/p&gt;

&lt;p&gt;L 50&lt;/p&gt;

&lt;p&gt;C 100&lt;/p&gt;

&lt;p&gt;D 500&lt;/p&gt;

&lt;p&gt;M 1000&lt;/p&gt;

&lt;p&gt;例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII , 即为 XX + V + II 。&lt;/p&gt;

&lt;p&gt;通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII ，而是 IV 。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX 。这个特殊的规则只适用于以下六种情况：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。&lt;/li&gt;
&lt;li&gt;X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。&lt;/li&gt;
&lt;li&gt;C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; &amp;ldquo;III&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt; 3&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; &amp;ldquo;IV&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt; 4&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例 3:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; &amp;ldquo;IX&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt; 9&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例 4:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; &amp;ldquo;LVIII&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt; 58&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解释:&lt;/strong&gt; C = 100, L = 50, XXX = 30, III = 3.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例 5:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; &amp;ldquo;MCMXCIV&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt; 1994&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解释:&lt;/strong&gt; M = 1000, CM = 900, XC = 90, IV = 4.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现思路:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1.定义一个map用于存储每个罗马数字代表的整数&lt;/p&gt;

&lt;p&gt;2.定义一个sign标志用于判断前一个罗马数字是否小于后一个罗马数字，如果小于则将sign标志置为-1&lt;/p&gt;

&lt;p&gt;3.从后往前循环遍历字符串，如果前一个罗马数字通过map获取到的值(temp)小于后一个(last)，sign=-1&lt;/p&gt;

&lt;p&gt;​    res=sign*temp&lt;/p&gt;

&lt;p&gt;​    last=temp&lt;/p&gt;

&lt;p&gt;4.返回res&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;代码实现:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;/**
 * Roman to Integer
 * 罗马数字转整数
*/
func romanToInt(s string) int {
	res := 0
	m := map[byte]int{
		‘I’: 1,
		‘V’: 5,
		‘X’: 10,
		‘L’: 50,
		‘C’: 100,
		‘D’: 500,
		‘M’: 1000,
	}
	last := 0
	for i := len(s) - 1; i &amp;gt;= 0; i— {
		temp := m[s[i]]
		sign := 1
		if temp &amp;lt; last {
			//小数在大数的左边，要减去小数
			sign = -1
		}
		res += sign * temp
		last = temp
	}
    return res
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://linchengLC.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://linchengLC.github.io/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;

&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
